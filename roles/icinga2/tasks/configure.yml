---
- name: populate features (icinga2_dict_features)
  set_fact:
    icinga2_dict_features: "{{ icinga2_dict_features|default({}) | combine({ item.name: item }) }}"
  with_items: "{{ icinga2_features }}"
  loop_control:
    label: "{{ item.name }}"

- name: main config file {{ icinga2_config_path + '/icinga2.conf' }}
  template:
    src: icinga2.conf.j2
    dest: "{{ icinga2_config_path + '/icinga2.conf' }}"
    owner: "{{ icinga2_user }}"
    group: "{{ icinga2_group }}"
  notify: check-and-reload-icinga2-service

- name: merge defaults and user specified constants (set_fact icinga2_combined_constants)
  set_fact:
    icinga2_combined_constants: "{{ icinga2_default_constants | combine(icinga2_constants) }}"

- name: set constants in {{ icinga2_config_path + '/constants.conf' }}
  ansible.builtin.template:
    src: constants.conf.j2
    dest: "{{ icinga2_config_path + '/constants.conf' }}"
    owner: "{{ icinga2_user }}"
    group: "{{ icinga2_group }}"
  notify: check-and-reload-icinga2-service

- name: features
  include_tasks: features.yml

- name: objects
  include_tasks: objects.yml

- name: ensure monitoring config directories
  ansible.builtin.file:
    path: "{{ icinga2_config_path }}/{{ item }}"
    state: directory
    owner: "{{ item.owner | default(icinga2_user) }}"
    group: "{{ item.group | default(icinga2_group) }}"
  loop: "{{ icinga2_config_directories }}"
  when:
    - icinga2_config_directories is defined
    - item.split('/')[0] == 'conf.d' or item.split('/')[0] == 'zones.d' or item.split('/')[0] == icinga2_confd
    # If multiple local configs folders can be defined this rule creates only
    # the directories starting with defined folders.
    # Related var looks like this:
    # icinga2_local_config:
    #  - conf.d
    #  - my_own_config.d
    #- item.split('/')[0] in icinga2_local_config or item.split('/')[0] == 'zones.d'

- name: collect config fragments (icinga2_fragments_path)
  find:
    path: "{{ icinga2_fragments_path }}"
    recurse: yes
    file_type: file
  register: result_frag

- name: cleanup config files (icinga2_fragments_path)
  file:
    state: absent
    dest: "{{ item.path }}"
  loop: "{{ result_frag.files }}"
  loop_control:
    label: "{{ item.path }}"
  when:
    - item.path not in icinga2_local_objects
    - item.path not in _icinga2_custom_conf_paths

- name: Remove empty config dirs (icinga2_fragments_path)
  ansible.builtin.command:
    cmd: "find {{ icinga2_fragments_path }} -mindepth 2 -type d -empty -print -exec rmdir {} +"
  register: _removed_dirs
  until: _removed_dirs.stdout_lines | length == 0
  retries: 100
  delay: 0
  changed_when: _removed_dirs.attempts > 1

- name: Collect config files (icinga2_config_path)
  vars:
    _icinga2_config_directories: "{{
      (icinga2_config_directories | select('match', '^conf.d/.*')) +
      (icinga2_config_directories | select('match', '^zones.d/.*')) +
      ((icinga2_config_directories | select('match', '^' + [icinga2_confd, '.*'] | path_join)) if icinga2_confd is string else [])
    }}"
  ansible.builtin.find:
    paths: "{{ _icinga2_config_directories | netways.icinga.prefix(prefix=icinga2_config_path + '/') }}"
    recurse: true
    file_type: file
    pattern: "*.conf"
  register: result

- name: Cleanup config files (icinga2_config_path)
  loop: "{{ result.files | map(attribute='path') }}"
  vars:
    _icinga2_sys_config_fragment_path: "{{ item | regex_replace('^' + icinga2_config_path + '(.*)$', icinga2_fragments_path + '\\1') }}"
  when:
    - _icinga2_sys_config_fragment_path not in icinga2_local_objects
    - _icinga2_sys_config_fragment_path not in _icinga2_custom_conf_paths
  ansible.builtin.file:
    state: absent
    dest: "{{ item }}"

- name: Remove empty config dirs (icinga2_config_path) # noqa: command-instead-of-shell
  vars:
    _icinga2_config_directories: "{{
      (
        (icinga2_config_directories | select('match', '^conf.d/.*')) +
        (icinga2_config_directories | select('match', '^zones.d/.*')) +
        ((icinga2_config_directories | select('match', '^' + [icinga2_confd, '.*'] | path_join)) if icinga2_confd is string else [])
      ) | netways.icinga.prefix(prefix=icinga2_config_path + '/') | join(' ')
    }}"
  ansible.builtin.shell:
    cmd: |
      for path in {{ _icinga2_config_directories }}
      do
        if [ -d "$path" ]; then
          find "$path" -mindepth 1 -type d -empty -print -exec rmdir {} +
        fi
      done
  register: _removed_dirs
  until: _removed_dirs.stdout_lines | length == 0
  retries: 100
  delay: 0
  changed_when: _removed_dirs.attempts > 1

- name: collect config files
  find:
    path: "{{ icinga2_fragments_path }}"
    recurse: yes
    file_type: file
    pattern: '*.conf'
  register: result

- name: assemble config files
  ansible.builtin.copy:
    src: "{{ item.path }}"
    remote_src: true
    dest: "{{ item.path | regex_replace('^'+icinga2_fragments_path, icinga2_config_path) }}"
    owner: "{{ icinga2_user }}"
    group: "{{ icinga2_group }}"
    mode: 0644
  loop: "{{ result.files }}"
  loop_control:
    label: "{{ item.path }}"
  notify: check-and-reload-icinga2-service

- name: enable features
  file:
    state: "{{ 'link' if (item.state is undefined or item.state != 'absent') else 'absent' }}"
    path: "{{ '/etc/icinga2/features-enabled/' + icinga2_feature_realname[item.name]|default(item.name) + '.conf' }}"
    src: "{{ '../features-available/' + icinga2_feature_realname[item.name]|default(item.name) + '.conf' if (item.state is undefined or item.state != 'absent') else omit }}"
  loop: "{{ icinga2_features }}"
  loop_control:
    label: "{{ item.name }}"
  notify: check-and-reload-icinga2-service
